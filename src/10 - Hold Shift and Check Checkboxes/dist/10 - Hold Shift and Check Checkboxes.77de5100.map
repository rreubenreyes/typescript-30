{"version":3,"sources":["index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;AAEA,IAAA,aAAA;AAAA;AAAA,YAAA;AAAA,WAAA,aAAA,GAAA;AACU,SAAA,eAAA,GAA2B,KAA3B;AAkBT;;AAfC,EAAA,MAAA,CAAA,cAAA,CAAI,aAAA,CAAA,SAAJ,EAAI,gBAAJ,EAAkB;SAAlB,eAAA;AACE,aAAO,KAAK,eAAZ;AACD,KAFiB;SAIlB,aAAmB,OAAnB,EAAmC;AACjC,WAAK,eAAL,GAAuB,OAAvB;AACD,KANiB;oBAAA;;AAAA,GAAlB;AAQA,EAAA,MAAA,CAAA,cAAA,CAAI,aAAA,CAAA,SAAJ,EAAI,aAAJ,EAAe;SAAf,eAAA;AACE,aAAO,KAAK,YAAZ;AACD,KAFc;SAIf,aAAgB,KAAhB,EAA6B;AAC3B,WAAK,YAAL,GAAoB,KAApB;AACD,KANc;oBAAA;;AAAA,GAAf;AAOF,SAAA,aAAA;AAnBA,CAAA,EAAA;AAqBA;;;AACA,IAAM,UAAU,GAAiC,QAAQ,CAAC,gBAAT,CAC/C,qBAD+C,CAAjD;AAIA;;AACA,IAAM,KAAK,GAAG,IAAI,aAAJ,EAAd;AAEA;;AACA,SAAS,qBAAT,CAA+B,EAA/B,EAAyD;MAAxB,OAAA,GAAA,EAAA,CAAA;;AAC/B,UAAQ,OAAR;AACE,SAAK,EAAL;AACE,MAAA,KAAK,CAAC,cAAN,GAAuB,IAAvB;AACA;;AACF;AACE;AALJ;AAOD;;AAED,SAAS,mBAAT,CAA6B,EAA7B,EAAuD;MAAxB,OAAA,GAAA,EAAA,CAAA;;AAC7B,UAAQ,OAAR;AACE,SAAK,EAAL;AACE,MAAA,KAAK,CAAC,cAAN,GAAuB,KAAvB;AACA;;AACF;AACE;AALJ;AAOD;;AAED,SAAS,WAAT,GAAoB;AAClB,MAAI,KAAK,CAAC,cAAV,EAA0B;AAChB,QAAA,gBAAA,GAAA,KAAA,CAAA,WAAA;AACR,QAAM,KAAK,GAAW,QAAQ,CAAC,KAAK,OAAL,CAAa,KAAd,EAAqB,EAArB,CAA9B;;AAEM,QAAA,EAAA,GAAA,CAAA,gBAAA,EAAA,KAAA,EAAA,IAAA,EAAA;AAAA,QAAC,KAAA,GAAA,EAAA,CAAA,CAAA,CAAD;AAAA,QAAM,KAAA,GAAA,EAAA,CAAA,CAAA,CAAN;;AAEN,IAAA,UAAU,CAAC,OAAX,CAAmB,UAAC,QAAD,EAA2B;AAC5C,UAAM,CAAC,GAAW,QAAQ,CAAC,QAAQ,CAAC,OAAT,CAAiB,KAAlB,EAAyB,EAAzB,CAA1B;;AACA,UAAI,CAAC,IAAI,KAAL,IAAY,CAAC,IAAI,KAArB,EAA0B;AACxB,QAAA,QAAQ,CAAC,OAAT,GAAmB,IAAnB;AACD;AACF,KALD;AAMD;;AACD,EAAA,KAAK,CAAC,WAAN,GAAoB,KAAK,OAAL,GAAe,QAAQ,CAAC,KAAK,OAAL,CAAa,KAAd,EAAqB,EAArB,CAAvB,GAAkD,IAAtE;AACD;AAED;;;AACA,MAAM,CAAC,gBAAP,CAAwB,SAAxB,EAAmC,qBAAnC;AACA,MAAM,CAAC,gBAAP,CAAwB,OAAxB,EAAiC,mBAAjC;AAEA,UAAU,CAAC,OAAX,CAAmB,UAAC,QAAD,EAA6B,CAA7B,EAAsC;AACvD;AACA,EAAA,QAAQ,CAAC,YAAT,CAAsB,YAAtB,EAAoC,KAAG,CAAvC;AACA,EAAA,QAAQ,CAAC,gBAAT,CAA0B,OAA1B,EAAmC,WAAnC;AACD,CAJD","file":"10 - Hold Shift and Check Checkboxes.77de5100.map","sourceRoot":"..","sourcesContent":["/* tslint:disable:variable-name */\n/* interfaces */\n\nclass ModifierState {\n  private _isMultiEnabled: boolean = false\n  private _lastChecked: number | null\n\n  get isMultiEnabled(): boolean {\n    return this._isMultiEnabled\n  }\n\n  set isMultiEnabled(enabled: boolean) {\n    this._isMultiEnabled = enabled\n  }\n\n  get lastChecked(): number {\n    return this._lastChecked\n  }\n\n  set lastChecked(index: number) {\n    this._lastChecked = index\n  }\n}\n\n/* elements */\nconst checkboxes: NodeListOf<HTMLInputElement> = document.querySelectorAll(\n  `[type=\"checkbox\"]`\n)\n\n/* state */\nconst state = new ModifierState()\n\n/* handlers */\nfunction handleModifierKeyDown({ keyCode }: KeyboardEvent): void {\n  switch (keyCode) {\n    case 16:\n      state.isMultiEnabled = true\n      break\n    default:\n      break\n  }\n}\n\nfunction handleModifierKeyUp({ keyCode }: KeyboardEvent): void {\n  switch (keyCode) {\n    case 16:\n      state.isMultiEnabled = false\n      break\n    default:\n      break\n  }\n}\n\nfunction handleClick(this: HTMLInputElement): void {\n  if (state.isMultiEnabled) {\n    const { lastChecked: lastCheckedIndex } = state\n    const index: number = parseInt(this.dataset.index, 10)\n\n    const [min, max]: number[] = [lastCheckedIndex, index].sort()\n\n    checkboxes.forEach((checkbox: HTMLInputElement) => {\n      const i: number = parseInt(checkbox.dataset.index, 10)\n      if (i >= min && i <= max) {\n        checkbox.checked = true\n      }\n    })\n  }\n  state.lastChecked = this.checked ? parseInt(this.dataset.index, 10) : null\n}\n\n/* listeners */\nwindow.addEventListener('keydown', handleModifierKeyDown)\nwindow.addEventListener('keyup', handleModifierKeyUp)\n\ncheckboxes.forEach((checkbox: HTMLInputElement, i: number) => {\n  /* assign an index to each DOM element */\n  checkbox.setAttribute(`data-index`, `${i}`)\n  checkbox.addEventListener('click', handleClick)\n})\n"]}