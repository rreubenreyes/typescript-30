{"version":3,"sources":["index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,IAAM,QAAQ,GAAY,QAAQ,CAAC,aAAT,CAAuB,YAAvB,CAA1B;AACA,IAAM,UAAU,GAAY,QAAQ,CAAC,aAAT,CAAuB,WAAvB,CAA5B;AACA,IAAM,UAAU,GAAY,QAAQ,CAAC,aAAT,CAAuB,cAAvB,CAA5B;;AAMA,IAAM,gBAAgB,GAAG,SAAnB,gBAAmB,CAAC,CAAD,EAAc;AACrC,MAAM,eAAe,GAAW,EAAhC;AACA,MAAM,UAAU,GAAI,CAAC,CAAC,CAAD,CAAD,GAAO,GAAR,GAAe,EAAf,GAAoB,eAAvC;AACA,MAAM,UAAU,GAAI,CAAC,CAAC,CAAD,CAAD,GAAO,GAAR,GAAe,EAAf,GAAoB,UAAU,GAAG,EAAjC,GAAsC,eAAzD;AACA,MAAM,QAAQ,GAAI,CAAC,CAAC,CAAD,CAAD,GAAO,GAAR,GAAe,EAAf,GAAoB,UAAU,GAAG,EAAjC,GAAsC,eAAvD;AAEA,SAAO,CAAI,QAAQ,GAAA,KAAZ,EAAsB,UAAU,GAAA,KAAhC,EAA0C,UAAU,GAAA,KAApD,CAAP;AACD,CAPD;;AASA,IAAM,IAAI,GAAG,SAAP,IAAO,GAAA;AACX,MAAM,IAAI,GAAS,IAAI,IAAJ,EAAnB;AACA,MAAM,GAAG,GAAe,CACtB,IAAI,CAAC,QAAL,EADsB,EAEtB,IAAI,CAAC,UAAL,EAFsB,EAGtB,IAAI,CAAC,UAAL,EAHsB,CAAxB;;AAKM,MAAA,EAAA,GAAA,gBAAA,CAAA,GAAA,CAAA;AAAA,MAAC,KAAA,GAAA,EAAA,CAAA,CAAA,CAAD;AAAA,MAAQ,OAAA,GAAA,EAAA,CAAA,CAAA,CAAR;AAAA,MAAiB,OAAA,GAAA,EAAA,CAAA,CAAA,CAAjB;;AACN,EAAA,QAAQ,CAAC,KAAT,CAAe,SAAf,GAA2B,YAAU,KAAV,GAAe,GAA1C;AACA,EAAA,UAAU,CAAC,KAAX,CAAiB,SAAjB,GAA6B,YAAU,OAAV,GAAiB,GAA9C;AACA,EAAA,UAAU,CAAC,KAAX,CAAiB,SAAjB,GAA6B,YAAU,OAAV,GAAiB,GAA9C;AACD,CAXD;;AAaA,IAAI;AACJ,WAAW,CAAC,IAAD,EAAO,IAAP,CAAX","file":"02 - JS and CSS Clock.77de5100.map","sourceRoot":"..","sourcesContent":["/* elements */\nconst hourHand: Element = document.querySelector(`.hour-hand`)\nconst minuteHand: Element = document.querySelector(`.min-hand`)\nconst secondHand: Element = document.querySelector(`.second-hand`)\n\n/* behavior */\ntype AnalogTime = [number, number, number]\ntype AnalogTimeRotation = [string, string, string]\n\nconst getRotationAngle = (t: AnalogTime): AnalogTimeRotation => {\n  const clockOffsetDegs: number = 90\n  const secondDegs = (t[2] * 360) / 60 + clockOffsetDegs\n  const minuteDegs = (t[1] * 360) / 60 + secondDegs / 60 + clockOffsetDegs\n  const hourDegs = (t[0] * 360) / 12 + minuteDegs / 60 + clockOffsetDegs\n\n  return [`${hourDegs}deg`, `${minuteDegs}deg`, `${secondDegs}deg`]\n}\n\nconst move = (): void => {\n  const time: Date = new Date()\n  const now: AnalogTime = [\n    time.getHours(),\n    time.getMinutes(),\n    time.getSeconds()\n  ]\n  const [hours, minutes, seconds] = getRotationAngle(now)\n  hourHand.style.transform = `rotate(${hours})`\n  minuteHand.style.transform = `rotate(${minutes})`\n  secondHand.style.transform = `rotate(${seconds})`\n}\n\nmove()\nsetInterval(move, 1000)\n"]}