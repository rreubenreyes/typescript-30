{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"04 - Array Cardio Day 1.77de5100.map","sourceRoot":"..","sourcesContent":["/* tslint:disable:no-console */\n// Get your shorts on - this is an array workout!\n// ## Array Cardio Day 1\n\n// Some data we can work with\ninterface IInventor {\n  first: string\n  last: string\n  year: number\n  passed: number\n}\n\nconst inventors: IInventor[] = [\n  { first: 'Albert', last: 'Einstein', year: 1879, passed: 1955 },\n  { first: 'Isaac', last: 'Newton', year: 1643, passed: 1727 },\n  { first: 'Galileo', last: 'Galilei', year: 1564, passed: 1642 },\n  { first: 'Marie', last: 'Curie', year: 1867, passed: 1934 },\n  { first: 'Johannes', last: 'Kepler', year: 1571, passed: 1630 },\n  { first: 'Nicolaus', last: 'Copernicus', year: 1473, passed: 1543 },\n  { first: 'Max', last: 'Planck', year: 1858, passed: 1947 },\n  { first: 'Katherine', last: 'Blodgett', year: 1898, passed: 1979 },\n  { first: 'Ada', last: 'Lovelace', year: 1815, passed: 1852 },\n  { first: 'Sarah E.', last: 'Goode', year: 1855, passed: 1905 },\n  { first: 'Lise', last: 'Meitner', year: 1878, passed: 1968 },\n  { first: 'Hanna', last: 'HammarstrÃ¶m', year: 1829, passed: 1909 }\n]\n\nconst people: string[] = [\n  'Beck, Glenn',\n  'Becker, Carl',\n  'Beckett, Samuel',\n  'Beddoes, Mick',\n  'Beecher, Henry',\n  'Beethoven, Ludwig',\n  'Begin, Menachem',\n  'Belloc, Hilaire',\n  'Bellow, Saul',\n  'Benchley, Robert',\n  'Benenson, Peter',\n  'Ben-Gurion, David',\n  'Benjamin, Walter',\n  'Benn, Tony',\n  'Bennington, Chester',\n  'Benson, Leana',\n  'Bent, Silas',\n  'Bentsen, Lloyd',\n  'Berger, Ric',\n  'Bergman, Ingmar',\n  'Berio, Luciano',\n  'Berle, Milton',\n  'Berlin, Irving',\n  'Berne, Eric',\n  'Bernhard, Sandra',\n  'Berra, Yogi',\n  'Berry, Halle',\n  'Berry, Wendell',\n  'Bethea, Erin',\n  'Bevan, Aneurin',\n  'Bevel, Ken',\n  'Biden, Joseph',\n  'Bierce, Ambrose',\n  'Biko, Steve',\n  'Billings, Josh',\n  'Biondo, Frank',\n  'Birrell, Augustine',\n  'Black, Elk',\n  'Blair, Robert',\n  'Blair, Tony',\n  'Blake, William'\n]\n\n// Array.prototype.filter()\n// 1. Filter the list of inventors for those who were born in the 1500's\nconst inventors1500s: IInventor[] = inventors.filter(\n  ({ year }: IInventor) => year >= 1500 && year < 1600\n)\nconsole.log(`1)`, inventors1500s)\n\n// Array.prototype.map()\n// 2. Give us an array of the inventors' first and last names\nconst inventorsFirstLast: string[] = inventors.map(\n  ({ first, last }: IInventor) => `${first} ${last}`\n)\nconsole.log(`2)`, inventorsFirstLast)\n\n// Array.prototype.sort()\n// 3. Sort the inventors by birthdate, oldest to youngest\nconst inventorsByAge: IInventor[] = inventors.sort(\n  ({ year: a }: IInventor, { year: b }: IInventor) => a - b\n)\nconsole.log(`3)`, inventorsByAge)\n\n// Array.prototype.reduce()\n// 4. How many years did all the inventors live?\nconst totalAge: number = inventors.reduce(\n  (a: number, { year, passed }: IInventor) => a + (passed - year),\n  0\n)\nconsole.log(`4)`, totalAge)\n\n// 5. Sort the inventors by years lived\nconst inventorsByLifespan: IInventor[] = inventors.sort(\n  (\n    { year: yearsA, passed: passedA }: IInventor,\n    { year: yearsB, passed: passedB }: IInventor\n  ) => passedB - yearsB - (passedA - yearsA)\n)\nconsole.log(`5)`, inventorsByLifespan)\n\n// 6. create a list of Boulevards in Paris that contain 'de' anywhere in the name\n/* i skipped #6, oops */\n\n// 7. sort Exercise\n// Sort the people alphabetically by last name\nconst peopleByLastName: string[] = people.sort()\nconsole.log(`7)`, peopleByLastName)\n\n// 8. Reduce Exercise\n// Sum up the instances of each of these\ninterface IStringTally {\n  [index: string]: number\n}\nconst data: string[] = [\n  'car',\n  'car',\n  'truck',\n  'truck',\n  'bike',\n  'walk',\n  'car',\n  'van',\n  'bike',\n  'walk',\n  'car',\n  'van',\n  'car',\n  'truck'\n]\nconst counts: IStringTally = data.reduce((a: IStringTally, b: string) => {\n  a[b] ? (a[b] += 1) : (a[b] = 1)\n  return a\n}, {})\nconsole.log(`8)`, counts)\n"]}